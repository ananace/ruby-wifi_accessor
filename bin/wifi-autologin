#!/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'wifi_accessor'

opts = {}
OptParse.new do |parse|
  parse.banner = "Usage: #{$PROGRAM_NAME} [OPTIONS...] NETWORK"

  parse.on '-h', '--help', 'Display this text' do
    puts parse
    exit
  end

  parse.on '-v', '--verbose', 'Run verbosely' do
    opts[:verbose] = true
  end

  parse.on '-l', '--[no-]login', 'Log in' do |login|
    opts[:login] = login
  end
  parse.on '--[no-]hooks', 'Run hooks' do |hooks|
    opts[:hooks] = hooks
  end
  parse.on '-d', '--[no-]data', 'Read data amount' do |data|
    opts[:data] = data
  end
  parse.on '-A', '--[no-]auto', 'Automatically detect WiFi network' do |auto|
    opts[:auto] = auto
  end
end.parse!

raise 'Network name is missing' if ARGV.empty? && !opts[:auto]

network = ARGV.first
if !network && opts[:auto]
  network = WifiAccessor.discover_network
  puts "Discovered connected network as #{network}" if network
end
network = WifiAccessor.get(network) if network

unless network
  puts 'Failed to find network'
  exit 1
end

if opts[:login]
  puts 'Logging in...'

  begin
    # Pre-check URL
    network.url

    env = {
      'NETWORK' => network.name
    }

    WifiAccessor.run_hooks!(network.hooks['pre-login'], env, verbose: opts[:verbose])

    begin
      network.login!
    rescue StandardError => e
      env['ERROR'] = "#{e.class}: #{e}"
      WifiAccessor.run_hooks!(network.hooks['error'], env, verbose: opts[:verbose])
      exit 1
    end

    puts 'Login succeeded'
  rescue WifiAccessor::AlreadyLoggedInError
    # Already logged in, just run hooks
    puts 'Already logged in'
    exit unless opts[:hooks]
  end
end

# Run hooks when just logged in - unless --no-hooks is set - or when --hooks is set.
if (opts[:login] && opts[:hooks] != false) || opts[:hooks]
  env = {
    'NETWORK' => network.name
  }

  WifiAccessor.run_hooks!(network.hooks['login'], env, verbose: opts[:verbose])
end

if opts[:data] && network.data?
  data = network.data!

  env = {
    'NETWORK' => network.name,
    'DATA_INFINITE' => data.infinite? ? 1 : 0,
    'DATA_USED' => data.used,
    'DATA_TOTAL' => data.total,
    'DATA_AVAILABLE' => data.available
  }

  WifiAccessor.run_hooks!(network.hooks['data'], env, verbose: opts[:verbose])

  if data.available
    puts "Data: #{data.available}MB available."
  elsif data.used
    if data.total
      puts "Data: #{data.used}MB/#{data.total}MB used"
    else
      puts "Data: #{data.used}MB used"
    end
  end
end
